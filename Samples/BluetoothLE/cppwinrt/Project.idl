//*********************************************************
//
// Copyright (c) Microsoft. All rights reserved.
// This code is licensed under the MIT License (MIT).
// THIS CODE IS PROVIDED *AS IS* WITHOUT WARRANTY OF
// ANY KIND, EITHER EXPRESS OR IMPLIED, INCLUDING ANY
// IMPLIED WARRANTIES OF FITNESS FOR A PARTICULAR
// PURPOSE, MERCHANTABILITY, OR NON-INFRINGEMENT.
//
//*********************************************************

namespace SDKTemplate
{
    [default_interface]
    runtimeclass Scenario1_Discovery : Windows.UI.Xaml.Controls.Page
    {
        Scenario1_Discovery();

        Windows.Foundation.Collections.IObservableVector<Object> KnownDevices{ get; };

        Windows.UI.Xaml.Controls.ListView ResultsListView{ get; };
        void EnumerateButton_Click();
        void PairButton_Click();
        Boolean Not(Boolean value);
    }

    [default_interface]
    runtimeclass Scenario2_Client : Windows.UI.Xaml.Controls.Page
    {
        Scenario2_Client();

        Windows.Foundation.Collections.IObservableVector<Object> ServiceCollection{ get; };
        Windows.Foundation.Collections.IObservableVector<Object> CharacteristicCollection{ get; };
        void ConnectButton_Click();
        void ServiceList_SelectionChanged();
        void CharacteristicList_SelectionChanged();
        void CharacteristicReadButton_Click();
        void CharacteristicWriteButton_Click();
        void CharacteristicWriteButtonInt_Click();
        void ValueChangedSubscribeToggle_Click();
    }

    [default_interface]
    runtimeclass Scenario3_ServerForeground : Windows.UI.Xaml.Controls.Page
    {
        Scenario3_ServerForeground();

        void PublishButton_ClickAsync();
    }

    enum AttributeType
    {
        Service = 0,
        Characteristic = 1,
        Descriptor = 2
    };

    /// <summary>
    ///     Represents the display of an attribute - both characteristics and services.
    /// </summary>
    runtimeclass BluetoothLEAttributeDisplay
    {
        static BluetoothLEAttributeDisplay CreateFromService(Windows.Devices.Bluetooth.GenericAttributeProfile.GattDeviceService service);
        static BluetoothLEAttributeDisplay CreateFromCharacteristic(Windows.Devices.Bluetooth.GenericAttributeProfile.GattCharacteristic characteristic);

        Windows.Devices.Bluetooth.GenericAttributeProfile.GattCharacteristic characteristic;
        Windows.Devices.Bluetooth.GenericAttributeProfile.GattDescriptor descriptor;
        Windows.Devices.Bluetooth.GenericAttributeProfile.GattDeviceService service;
        String Name{ get; };
        String AttributeDisplayType{ get; };
    };

    /// <summary>
    ///     Display class used to represent a BluetoothLEDevice in the Device list
    /// </summary>
    runtimeclass BluetoothLEDeviceDisplay : Windows.UI.Xaml.Data.INotifyPropertyChanged
    {
        BluetoothLEDeviceDisplay(Windows.Devices.Enumeration.DeviceInformation deviceInfoIn);

        Windows.Devices.Enumeration.DeviceInformation DeviceInformation{ get; };

        String Id{ get; };
        String Name{ get; };
        Boolean IsPaired{ get; };
        Boolean IsConnected{ get; };
        Boolean IsConnectable{ get; };

        IMapView<String, Object> Properties{ get; };

        Windows.UI.Xaml.Media.Imaging.BitmapImage GlyphBitmapImage{ get; };

        void Update(Windows.Devices.Enumeration.DeviceInformationUpdate deviceInfoUpdate);
    };
}
